// Добавление ссылок на типы, определенные в пространстве имен System
using System;                                                                    
using System.Collections.Generic;
//using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;

using HClassLibrary;
using StatisticCommon;
/// <summary>
/// Пространство имен Statistic 
/// </summary>
namespace Statistic
{
    /// <summary>
    /// Открытый частичный класс FormGraphicsSettings (настройка графиков) 
    /// наследуется от базового класса Form
    /// </summary>
    public partial class FormGraphicsSettings : Form                                 
    {
        #region Перечисления
        /// <summary>
        /// Открытое перечисление INDEX_COLOR (индекс цвета)
        /// </summary>
        public enum INDEX_COLOR                                                    
        {
            /// <summary>
            /// В перечислении INDEX_COLOR  определены 11 именованных констант, по умолчанию
            /// первому эл-ту присваивается 0, остальным n+1
            /// </summary>
            UDG, DIVIATION, ASKUE, ASKUE_LK_REGULAR, SOTIASSO, REC, TEMP_ASKUTE,
            BG_ASKUE, BG_SOTIASSO, BG_ASKUTE, GRID, COUNT_INDEX_COLOR                                                     
        }

        /// <summary>
        /// Открытое перечисление  TYPE_UPDATEGUI  (типы пользовательских настроек)   
        /// </summary>
        public enum TYPE_UPDATEGUI                                                                                              
        {
        
            SCALE, LINEAR, COLOR, SOURCE_DATA, COLOR_SHEMA, COLOR_CHANGESHEMA
               , COUNT_TYPE_UPDATEGUI
        };

        /// <summary>
        /// Закрытое перечисление  CONN_SETT_TYPE (источники данных)
        /// </summary>
        private enum CONN_SETT_TYPE
        {                                         
            AISKUE_PLUS_SOTIASSO                                                
            , AISKUE_3_MIN//, AISKUE_30_MIN
            , SOTIASSO_3_MIN, SOTIASSO_1_MIN
            , COSTUMIZE
                , COUNT_CONN_SETT_TYPE
        }

        /// <summary>
        /// Открытое перечисление GraphTypes  (типы графиков)
        /// </summary>
        public enum GraphTypes                                                       
        {
            //линейный    
            Linear,
            //гистограмма                                                     
            Bar,                                                                
        }

        /// <summary>
        /// Открытое перечисление ColorShemas  (цветовая схема)
        /// </summary>
        public enum ColorShemas {
            /// <summary>
            /// Системные цвета
            /// </summary>
            System,
            /// <summary>
            /// Выбранная схема
            /// </summary>
            Custom,
        }
        #endregion

        /// <summary>
        /// Массив признаков использования источников данных
        /// </summary>
        HMark m_markSourceData;

        /// <summary>
        /// открытые поля типа Color. 
        /// </summary>
        //public Color udgColor                                                     
        //    , divColor
        //    , pColor_ASKUE, pColor_SOTIASSO
        //    , recColor
        //    , m_bgColor_ASKUE, m_bgColor_SOTIASSO
        //    , gridColor;

        #region Поля
        /// <summary>
        /// Открытое поле scale (масштаб) типа bool
        /// </summary>
        public bool scale;

        /// <summary>
        /// Открытое поле m_graphTypes (типы графиков) типа GraphTypes
        /// </summary>
        public GraphTypes m_graphTypes;

        public ColorShemas m_colorShema;
        #endregion

        /// <summary>
        /// Открытое поле m_connSettType_SourceData (источник данных) типа StatisticCommon.CONN_SETT_TYPE
        /// </summary>
        public StatisticCommon.CONN_SETT_TYPE m_connSettType_SourceData;

        /// <summary>
        /// ?? обновить активные настройки (поле, а слово делегат)
        /// </summary>
        private DelegateIntFunc delegateUpdateActiveGui;

        /// <summary>
        /// ??закрыть окно настроек графиков (поле, а слово делегат)
        /// </summary>
        private DelegateFunc delegateHideGraphicsSettings;

        /// <summary>
        /// Закрытое поле m_formMain типа FormMain. Зачем оно?
        /// </summary>
        private bool _allowedChangeShema;

        #region Конструктор
        /// <summary>
        /// Открытый пользовательский конструктор FormGraphicsSettings инициализирует поля m_formMain, delegateUpdateActiveGui, delegateHideGraphicsSettings
        /// </summary>
        /// <param name="form">Родительская форма - главное окно приложения</param>
        /// <param name="fUpdate">Метод для применения изменений</param>
        /// <param name="fHide">Метод снятия с отображения диалогового окна</param>
        /// <param name="bAllowedChangeShema">Признак(настраиваемый из БД) разрешения изменять цветовую схему</param>
        public FormGraphicsSettings (DelegateIntFunc fUpdate, DelegateFunc fHide, bool bAllowedChangeShema) 
        {
            // инициализация полей заданными пользователем значениями
            delegateUpdateActiveGui = fUpdate;
            delegateHideGraphicsSettings = fHide;
            _allowedChangeShema = bAllowedChangeShema;
            //масштабирование выключено по умолчанию
            scale = false;
            // полю m_markSourceData присваиваем ссылку на экземпляр класса HMark, вызываем конструктор HMark с одним параметром, передаем 0
            m_markSourceData = new HMark (0);

            InitializeComponent ();

            bool bGroupBoxSourceData = false;                                                            //переменной bGroupBoxSourceData присваиваем false
            CONN_SETT_TYPE cstGroupBoxSourceData = CONN_SETT_TYPE.AISKUE_3_MIN;                          //переменной cstGroupBoxSourceData присваиваем константу=1 (AISKUE_3_MIN)
            //Проверка условия прав доступа к возможности смены источника данных
            if (HStatisticUsers.IsAllowed((int)HStatisticUsers.ID_ALLOWED.SOURCEDATA_CHANGED) == true)   
            //if (m_formMain.m_users.IsAllowed(HStatisticUsers.ID_ALLOWED.SOURCEDATA_CHANGED) == true)
            //if ((HStatisticUsers.RoleIsAdmin == true) || (HStatisticUsers.RoleIsKomDisp == true))
            {
                bGroupBoxSourceData = true;                        //переменной bGroupBoxSourceData присваиваем true (групповой источник данных)
                cstGroupBoxSourceData = CONN_SETT_TYPE.COSTUMIZE;  //переменной cstGroupBoxSourceData присваиваем константу=4 (по умолчанию установлен COSTUMIZE)

                //кнопки АИСКУЭ+СОТИАССО и СОТИАССО(3 мин) становятся активными (да вроде все активные..?)
                m_arRbtnSourceData[(int)CONN_SETT_TYPE.AISKUE_PLUS_SOTIASSO].Enabled = HStatisticUsers.IsAllowed((int)HStatisticUsers.ID_ALLOWED.SOURCEDATA_ASKUE_PLUS_SOTIASSO);
                m_arRbtnSourceData[(int)CONN_SETT_TYPE.SOTIASSO_3_MIN].Enabled = HStatisticUsers.IsAllowed((int)HStatisticUsers.ID_ALLOWED.SOURCEDATA_SOTIASSO_3_MIN);
            }
            else
                ;

            this.gbxSourceData.Enabled = bGroupBoxSourceData;       //??                                 
            m_markSourceData.Marked((int)cstGroupBoxSourceData);

            checkedSourceData();           // вызов метода проверки источника данных

            m_graphTypes = GraphTypes.Bar; // тип графика-Гистограмма по умолчанию
        }
        #endregion

        #region Методы
        /// <summary>
        /// Закрытый метод getForeColor (получить цвет надписи) принимает агрумент типа структуры Color (выбранный цвет заднего плана)
        /// и возвращает цвет надписи (переднего плана)
        /// </summary>
        /// <param name="bgColor">Входной цвет фона, на котором размещается надпись</param>
        /// <returns>Цвет для надписи</returns>
        private Color getForeColor (Color bgColor)  
        {            
            return Color.FromArgb((bgColor.R + 128) % 256, (bgColor.G + 128) % 256, (bgColor.B + 128) % 256); 
        }

        /// <summary>
        /// Открытый метод COLOR принимает аргумент типа INDEX_COLOR (индекс настраиваемого параметра)
        /// и возвращает соответствующий цвет в палитре
        /// </summary>
        /// <param name="indx">Индекс цвета в палитре</param>
        /// <returns>Цвет из палитры</returns>
        public Color COLOR(INDEX_COLOR indx)
        {
            Color colorRes = Color.Empty;

            if (m_colorShema == ColorShemas.System)
                colorRes = m_arlblColor [(int)indx].BackColor;
            else
                switch (indx) {
                    case INDEX_COLOR.BG_ASKUE:
                    case INDEX_COLOR.BG_SOTIASSO:
                    case INDEX_COLOR.BG_ASKUTE:
                        colorRes = DarkColorTable._Custom;
                        break;
                    default:
                        colorRes = m_arlblColor [(int)indx].BackColor;
                        break;
                }

            return colorRes;
        }
        /// <summary>
        /// Установить признаки использования типов источников данных
        /// , закрытый метод checkedSourceData (проверить источник данных) ничего не принимает, ничего не возвращает
        /// </summary>
        private void checkedSourceData()     
        {
            m_arRbtnSourceData[(int)CONN_SETT_TYPE.AISKUE_PLUS_SOTIASSO].Checked = m_markSourceData.IsMarked((int)(int)CONN_SETT_TYPE.AISKUE_PLUS_SOTIASSO);//??
            m_arRbtnSourceData[(int)CONN_SETT_TYPE.AISKUE_3_MIN].Checked = m_markSourceData.IsMarked((int)(int)CONN_SETT_TYPE.AISKUE_3_MIN);
            m_arRbtnSourceData[(int)CONN_SETT_TYPE.SOTIASSO_3_MIN].Checked = m_markSourceData.IsMarked((int)(int)CONN_SETT_TYPE.SOTIASSO_3_MIN);
            m_arRbtnSourceData[(int)CONN_SETT_TYPE.SOTIASSO_1_MIN].Checked = m_markSourceData.IsMarked((int)(int)CONN_SETT_TYPE.SOTIASSO_1_MIN);
            m_arRbtnSourceData[(int)CONN_SETT_TYPE.COSTUMIZE].Checked = m_markSourceData.IsMarked((int)(int)CONN_SETT_TYPE.COSTUMIZE);
            
            //если нажата кнопка "АИСКУЭ+СОТИАССО", то источнику данных присвоить источник  "АИСКИЭ+СОТИАССО"
            if (m_arRbtnSourceData[(int)CONN_SETT_TYPE.AISKUE_PLUS_SOTIASSO].Checked == true)    
                m_connSettType_SourceData = StatisticCommon.CONN_SETT_TYPE.DATA_AISKUE_PLUS_SOTIASSO;
            else
            //если нажата кнопка "АИСКУЭ(3мин)", то источнику данных присвоить источник  "АИСКУЭ(3мин)"
                if (m_arRbtnSourceData[(int)CONN_SETT_TYPE.AISKUE_3_MIN].Checked == true)
                    m_connSettType_SourceData = StatisticCommon.CONN_SETT_TYPE.DATA_AISKUE;
                else
                    if (m_arRbtnSourceData[(int)CONN_SETT_TYPE.SOTIASSO_3_MIN].Checked == true)           //аналогично
                        m_connSettType_SourceData = StatisticCommon.CONN_SETT_TYPE.DATA_SOTIASSO_3_MIN;
                    else
                        if (m_arRbtnSourceData[(int)CONN_SETT_TYPE.SOTIASSO_1_MIN].Checked == true)
                            m_connSettType_SourceData = StatisticCommon.CONN_SETT_TYPE.DATA_SOTIASSO_1_MIN;
                        else
                            if (m_arRbtnSourceData[(int)CONN_SETT_TYPE.COSTUMIZE].Checked == true)
                                m_connSettType_SourceData = StatisticCommon.CONN_SETT_TYPE.COUNT_CONN_SETT_TYPE;
                            else
                                ;
        }
        /// <summary>
        /// Закрытый метод cbxScale_CheckedChanged (проверка изменения масштаба), 
        /// принимающий событие нажатия на кнопку "масштабирование" и ничего не возвращающий
        /// </summary>
        /// <param name="sender">Объект, инициировавший событие</param>
        /// <param name="e">Аргумент события</param>
        private void cbxScale_CheckedChanged(object sender, EventArgs e)
        {
            scale = cbxScale.Checked;                              //полю присвоить проверенное  значение
            delegateUpdateActiveGui((int)TYPE_UPDATEGUI.SCALE);    //обновить активную настройку (масштаб)
        }
        /// <summary>
        /// Закрытый метод lbl_color_Click (нажатие цвета), принимающий событие нажатия на выбранный цвет
        /// и ничего не возвращающий
        /// </summary>
        /// <param name="sender">Объект, инициировавший событие (подпись)</param>
        /// <param name="e">Аргумент события</param>
        private void lbl_color_Click(object sender, EventArgs e)   
        {
            TYPE_UPDATEGUI typeUpdate = ((sender as Control).Tag.GetType ().Equals (typeof (INDEX_COLOR))) == true
                ? TYPE_UPDATEGUI.COLOR
                    : TYPE_UPDATEGUI.COLOR_CHANGESHEMA;

            ColorDialog cd = new ColorDialog();                   // создаем экземпляр cd класса ColorDialog (Диалоговое окно "Цвет")
            cd.Color = ((Label)sender).BackColor;                 // вызвана структура Color на экземпляре, структуре присвоено значение выбранного цвета
            if (cd.ShowDialog(this) == DialogResult.OK)           //  , если выбран цвет и нажат ОК, то
            {
                // заднему плану присвоить выбранный цвет
                ((Label)sender).BackColor = cd.Color;
                // переднему плану (надписи) присвоить зрительно отличный цвет
                ((Label)sender).ForeColor = getForeColor (cd.Color);
                // при типе 'TYPE_UPDATEGUI.COLOR_SHEMA' выполнить дополн. действия
                if (typeUpdate == TYPE_UPDATEGUI.COLOR) {
                    // обновить активную настройку (цвет)
                    // для 'TYPE_UPDATEGUI.COLOR_SHEMA' активная настройка обновится в 'BackColorChanged'
                    delegateUpdateActiveGui ((int)typeUpdate);
                    
                } else
                    //// изменить и цвет границы
                    //((Label)sender).BorderColor = getForeColor (cd.Color)
                    ;
            } else
                ;
        }

        /// <summary>
        /// Закрытый метод GraphicsSettings_FormClosing (закрытие формы),
        /// принимающий событие закрытия формы (нажатие на крестик?) и ничего не возвращающий
        /// </summary>
        /// <param name="sender">Объект, инициировавший событие</param>
        /// <param name="e">Аргумент события</param>
        private void GraphicsSettings_FormClosing(object sender, FormClosingEventArgs e)
        {
            e.Cancel = true;                   // отмена=true
            delegateHideGraphicsSettings();    //вызов поля?
        }

        /// <summary>
        /// Открытый метод SetScale (установить масштаб),ничего не принимает и не возвращает
        /// </summary>
        public void SetScale()
        {
            //инвертировать текущее значение масштаба
            cbxScale.Checked = !cbxScale.Checked;        
        }

        private void cbUseSystemColors_CheckedChanged (object sender, EventArgs e)
        {
            m_colorShema = (sender as System.Windows.Forms.CheckBox).Checked == true ? ColorShemas.System : ColorShemas.Custom;

            m_arlblColor [(int)INDEX_COLOR.BG_ASKUE].Enabled =
            m_arlblColor [(int)INDEX_COLOR.BG_ASKUE].Enabled =
            m_arlblColor [(int)INDEX_COLOR.BG_ASKUE].Enabled =
                (sender as System.Windows.Forms.CheckBox).Checked;

            m_labelColorShema.Enabled = !(sender as System.Windows.Forms.CheckBox).Checked;

            delegateUpdateActiveGui ((int)TYPE_UPDATEGUI.COLOR_SHEMA);   //обновить активную настройку (цветовая схема)
        }

        /// <summary>
        /// Закрытый метод rbtnLine_CheckedChanged (проверка изменения типа графика), 
        /// принимающий события нажатия на кнопку "линейный" или "гистограмма"
        /// </summary>
        /// <param name="sender">Объект, инициировавший событие</param>
        /// <param name="e">Аргумент события</param>
        private void rbtnTypeGraph_CheckedChanged(object sender, EventArgs e)
        {
            foreach (RadioButton rbtn in m_arRbtnTypeGraph)
                if (rbtn.Checked == true) {
                    m_graphTypes = (GraphTypes)(rbtn as Control).Tag;

                    break;
                } else
                    ;
            
            delegateUpdateActiveGui((int)TYPE_UPDATEGUI.LINEAR);   //обновить активную настройку (тип графика)
        }

        private void rbtnSourceData_Click (object sender, EventArgs e)
        {
            rbtnSourceData_Click ((CONN_SETT_TYPE)(sender as Control).Tag);
        }

        /// <summary>
        /// Закрытый метод rbtnSourceData_Click( нажатие источника данных), ничего не принимает и не возвращает
        /// </summary>
        private void rbtnSourceData_Click()
        {
            checkedSourceData();                //вызов метода-проверить источник данных

            delegateUpdateActiveGui((int)TYPE_UPDATEGUI.SOURCE_DATA); //обновить активную настройку (источник данных)
        }
        /// <summary>
        /// Перегруженный метод, принимающий индекс источника информации
        /// </summary>
        /// <param name="indx">Индекс-таг-идентификатор типа источника данных для отображения</param>
        private void rbtnSourceData_Click(CONN_SETT_TYPE indx)   
        {
            if (m_arRbtnSourceData[(int)indx].Checked == false) 
            {
                m_markSourceData.UnMarked();
                m_markSourceData.Marked((int)indx);

                rbtnSourceData_Click();
            }
            else
                ;
        }        
        #endregion
    }

    public class DarkColorTable : ProfessionalColorTable
    {
        public DarkColorTable (Color colorSystem, string colorCustom)
        {
            int [] rgb;

            _System = colorSystem;

            try {
                rgb = Array.ConvertAll<string, int> (colorCustom.Split (','), Convert.ToInt32);                
                _custom = Color.FromArgb (rgb [0], rgb [1], rgb [2]);
            } catch (Exception e) {
                Logging.Logg ().Exception (e, string.Format ("DarkColorTable::ctor () - ..."), Logging.INDEX_MESSAGE.NOT_SET);
            }

            //UseSystemColors = true;
        }

        public static Color _System = Color.Empty;

        private static Color _custom;

        public static Color _Custom
        {// Color.FromArgb (255, 112, 128, 144);  // Color.SlateGray;
            get { return _custom; }

            set { _custom = value; }
        }

        public string CustomToString ()
        {
            return string.Format ("{0},{1},{2}", _custom.R, _custom.G, _custom.B);
        }

        private Color _pressed = Color.FromArgb (255, 52, 68, 84);

        private Color _border = Color.Black;

        public override Color ToolStripBorder { get { return _border; } }

        //public override Color ToolStripGradientBegin { get { return culoare; } }

        //public override Color ToolStripGradientEnd { get { return culoare; } }

        public override Color ToolStripDropDownBackground { get { return _Custom; } }

        //public override Color MenuItemBorder { get { return _Background; } }

        //public override Color MenuItemSelected { get { return _Background; } }        

        //public override Color MenuItemSelectedGradientBegin { get { return _Background; } }

        //public override Color MenuItemSelectedGradientEnd { get { return _Background; } }

        public override Color MenuItemPressedGradientBegin { get { return _pressed; } }

        public override Color MenuItemPressedGradientEnd { get { return _pressed; } }

        public override Color MenuBorder { get { return _border; } }        
    }
}